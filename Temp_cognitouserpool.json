{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Custom Resource Types for managing SWF resources", 
  "Parameters": {
		"PoolName": {
			"Type": "String",
				"Default": "userpool",
			"Description": "Please Enter The Name for the Cognito UserPool"
		},
		"UnusedAccountValidityDays": {
			"Type": "Number",
			"Default": "7",
			"Description": "Please Enter The ExpiryPeriod for UnusedAccountValidity in Number of Days"
		},
		"MfaConfiguration": {
			"Type": "String",
			"Default": "OFF",
			"AllowedValues": [ "OFF", "OPTIONAL", "ON" ],
			"Description": "Please Select the State of the MFA( Multi Facture Authentication)."
		},
		"MinimumLengthForPasswordPolicy": {
			"Type": "String",
				"Default": "8",
			"Description": "Please Enter The MinimumLength for Password(Must be greater than 6)"
		},
		"AutoVerifiedAttributes": {
			"Type": "CommaDelimitedList",			
		  "Default": "phone_number,email",
			"Description": "Please Enter The Name for the Auto Verified Attributes"
		},
		"AliasAttributes": {
			"Type": "CommaDelimitedList",			
		  "Default": "phone_number,email",
			"Description": "Please Enter The Name for the Alias Attributes"
		},
		"RequiredAttributes": {
			"Type": "CommaDelimitedList",			
		  "Default": "phone_number,email",
			"Description": "Please Enter The Name for the AutoVerified Attributes"
		},
		"DeviceOnlyRememberedOnUserPrompt": {
			"Type": "String",
			"Default" : "false",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the Device Rememberence On UserPrompt"
		},
		"AllowAdminCreateUserOnly": {
			"Type": "String",
			"Default" : "false",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the AllowAdminCreateUserOnly"
		},
		"ChallengeRequiredOnNewDevice": {
			"Type": "String",
			"Default" : "false",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the Challenge Required On New Device"
		},

		"UserPoolClientName": {
			"Type": "String",
			"Default": "DealMate",
			"Description": "Please Enter The Name of the UserPool Client"
		}
		
		},
	
  "Resources": {  
    "CognitoUserPool": {	
      "Type": "Custom::CognitoUserPool",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CognitoUserPoolFunction",
            "Arn"
          ]
        },        
        "PoolName": { "Ref" : "PoolName" },
        "AliasAttributes": [
          "phone_number",
          "email"		  
        ],		
		"AutoVerifiedAttributes": { "Ref" : "AutoVerifiedAttributes" },
		
		"Policies": { 
      "PasswordPolicy": { 
         "MinimumLength": { "Ref" : "MinimumLengthForPasswordPolicy" }
		 
         
      }
   },
	"PasswordPolicy": {
            "MinimumLength": {
              "Ref": "MinimumLengthForPasswordPolicy"
            }
			
        },   
		"AdminCreateUserConfig": {
			"AllowAdminCreateUserOnly": { "Ref" : "AllowAdminCreateUserOnly" },
			"InviteMessageTemplate": {
			"EmailMessage": "Your username is {username} and temporary password is {####}.",
			"EmailSubject": "Your temporary password",
			"SMSMessage": "Your username is {username} and temporary password is {####}."
      },
      "UnusedAccountValidityDays": { "Ref" : "UnusedAccountValidityDays" }
		},		
		"MfaConfiguration": { "Ref" : "MfaConfiguration" },
                
        "LambdaConfig": {
          "CustomMessage": "CustomMessage",
          "PostAuthentication": "PostAuthentication",
          "PostConfirmation": "PostConfirmation",
          "PreAuthentication": "PreAuthentication",
          "PreSignUp": "PreSignUp"
        },
		"DeviceConfiguration": { 
      "ChallengeRequiredOnNewDevice": { "Ref" : "ChallengeRequiredOnNewDevice" },
      "DeviceOnlyRememberedOnUserPrompt": { "Ref" : "DeviceOnlyRememberedOnUserPrompt" }
   },
			
   "Schema": [    	
      { 
         "AttributeDataType": "Number",		 
         "Name"  : "postalcode",		 	 
         "NumberAttributeConstraints": { 
            "MaxValue": "1000000",
            "MinValue": "0"
         }         
	  },
	   { 
         "AttributeDataType": "String",		 
         "Name"  : "family_name",		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         "Name"  : { "Ref" : "RequiredAttributes" },		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  }
	  
	  
	  
	  
		
   ],   
 

   "EmailConfiguration": { 
      "ReplyToEmailAddress": "alukka@mavenstaffing.in",
      "SourceArn": "arn:aws:iam::631580520244:role/service-role/PoolName-SMS-Role"
   },
   "SmsAuthenticationMessage": "SmsAuthenticationMessage",
   "SmsConfiguration": { 
      "ExternalId": "b1cd02b2-09fa-4e85-b6cf-dc9a59e7fc31",
      "SnsCallerArn":  {
          "Fn::GetAtt": [
            "CognitoUserPoolSMSRole",
            "Arn"
          ]
        }
   },   
   "SmsVerificationMessage": "Your Deal Mate verification code is {####}."  

}
},
"CognitoUserPoolClient": {
  "Type": "Custom::CreateUserPoolClient",
  "DependsOn" : "CognitoUserPool",
  "Properties": {
	"ServiceToken": {
          "Fn::GetAtt": [
            "CognitoUserPoolClientFunction",
            "Arn"
          ]
        },
	"ClientName": { "Ref" : "UserPoolClientName" },
	"GenerateSecret": true,
	"UserPoolId": { "Fn::GetAtt" : [ "CognitoUserPool", "Id" ] },
	"RefreshTokenValidity": 30
	}
	},     
   
    "CognitoUserPoolFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require(\"cfn-response\");",
                "var AWS = require(\"aws-sdk\");",
                "var cognito = new AWS.CognitoIdentityServiceProvider();",
                "exports.handler = function (event, context) {",
                "  var responseStatus = \"FAILED\";",
                "  if (event.RequestType == \"Delete\") {",
                "    cognito.listUserPools({ MaxResults: 60 }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "        response.send(event, context, responseStatus);",
                "      }",
                "      else {",
                "        console.log(data);",
                "        var userPool = {};",
                "        for(var i = 0; i < data.UserPools.length; i++) {",
                "          if(data.UserPools[i].Name == event.ResourceProperties.PoolName) {",
                "            userPool = data.UserPools[i];",
                "            break;     ",
                "          }",
                "        }",
                "        cognito.deleteUserPool({",
                "          UserPoolId: userPool.Id",
                "        }, function (err, data) {",
                "          if (err) {",
                "            console.log(err, err.stack);",
                "            response.send(event, context, responseStatus);",
                "          }",
                "          response.send(event, context, \"SUCCESS\");",
                "        });",
                "      }",
                "    });",
                "  } else if (event.RequestType == \"Update\") {",
                "    responseStatus = \"SUCCESS\";",
                "    response.send(event, context, responseStatus);",
                "  } else {",
                "    var responseData = {};",
				"    var myObj = event.ResourceProperties.PasswordPolicy;",
				"    console.log(\"printing myObj 1\" , myObj);",
				"    myObj[\"RequireLowercase\"] = true;",
				"    myObj[\"RequireNumbers\"] = true;",
				"    myObj[\"RequireSymbols\"] = false;",
				"    myObj[\"RequireUppercase\"] = true;",
				"    var myMainObj = {};",
				"    myMainObj[\"PasswordPolicy\"] = myObj;",
				"    console.log(\"printing myMainObj 1\" , myMainObj);",
				"    var myObjj = event.ResourceProperties.Schema;",
				"    console.log(\"printing myMainObjj 1\" , myObjj);",
				"    myObjj[0][\"DeveloperOnlyAttribute\"] = false;",
				"    myObjj[0][\"Mutable\"] = true;",
				"    myObjj[0][\"Required\"] = false;",				
				"    myObjj[1][\"Required\"] = true;",				
				"    myObjj[2][\"Required\"] = true;",
				"    if (myObjj[2][\"Required\"] == true){",
				"    if (myObjj[2][\"Name\"] == 'phone_number'){",
				"    myObjj[2][\"Name\"] = 'given_name';",						
				"    myObjj[3][\"Name\"] = 'phone_number';",							
				"    myObjj[3][\"Required\"] = true;",				
				"}",
				"else if (myObjj[2][\"Name\"] == 'email'){",
				"    myObjj[2][\"Name\"] = 'given_name';",						
				"    myObjj[3][\"Name\"] = 'email';",				
				"    myObjj[3][\"Required\"] = true;",
			    "}",
				"else if (myObjj[2][\"Name\"] == 'phone_number','email'){",
				"    myObjj[2][\"Name\"] = 'given_name';",						
				"    myObjj[3][\"Name\"] = 'phone_number';",
				"    myObjj[4][\"Name\"] = 'email';",				
				"    myObjj[3][\"Required\"] = true;",				
				"    myObjj[4][\"Required\"] = true;",
			    "}",
				"else {",
				"    myObjj[2][\"Name\"] = 'given_name';",				
			    "}",
				"}",
				"    var myObjj1 = event.ResourceProperties.DeviceConfiguration;",
				"    var myObj1 = myObjj1[\"ChallengeRequiredOnNewDevice\"] === 'true' ? true : false;",				
				"  myObjj1[\"ChallengeRequiredOnNewDevice\"] = myObj1;",
				"    var myObj2 = myObjj1[\"DeviceOnlyRememberedOnUserPrompt\"] === 'true' ? true : false;",				
				"  myObjj1[\"DeviceOnlyRememberedOnUserPrompt\"] = myObj2;",
				"    var myObj3 = event.ResourceProperties.AdminCreateUserConfig;",
				"    var myObj4 = myObj3[\"AllowAdminCreateUserOnly\"] === 'true' ? true : false;",							
				"  myObj3[\"AllowAdminCreateUserOnly\"] = myObj4;",				
                "    cognito.createUserPool({",
                "      PoolName: event.ResourceProperties.PoolName,",	
                "      AliasAttributes: event.ResourceProperties.AliasAttributes,",
                "      MfaConfiguration: event.ResourceProperties.MfaConfiguration,",
                "      AutoVerifiedAttributes: event.ResourceProperties.AutoVerifiedAttributes,",
                "      SmsVerificationMessage: event.ResourceProperties.SmsVerificationMessage,",
                "      SmsConfiguration: event.ResourceProperties.SmsConfiguration,",
				"      DeviceConfiguration: event.ResourceProperties.DeviceConfiguration,",
                "      Schema: event.ResourceProperties.Schema,",
                "      AdminCreateUserConfig: event.ResourceProperties.AdminCreateUserConfig,",				
				"      Policies: myMainObj",
                "     }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "      }",
                "      else {",
                "        responseStatus = \"SUCCESS\";",
                "        console.log(data);",
                "        responseData = { Id: data.UserPool.Id };",
                "      }",
                "      response.send(event, context, responseStatus, responseData);",
                "    });",
                "  }",
                "};"
              ]
            ]
          }
        },
        "Description": "CognitoUserPoolFunction Function",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 30
      }
    },
  "CognitoUserPoolClientFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require(\"cfn-response\");",				
                "var AWS = require(\"aws-sdk\");",				
                "var cognito = new AWS.CognitoIdentityServiceProvider();",
                "exports.handler = function (event, context) {",                    
                "  var responseStatus = \"FAILED\";",                
                "  if (event.RequestType == \"Delete\") {",
                "    cognito.listUserPoolClients({ MaxResults: 60 }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "        response.send(event, context, responseStatus);",
                "      }",
                "      else {",
                "        console.log(data);",
                "        var userPoolClient = {};",
                "        for(var i = 0; i < data.UserPoolClients.length; i++) {",
                "          if(data.UserPoolClients[i].Name == event.ResourceProperties.ClientName) {",
                "            userPoolClient = data.UserPoolClients[i];",
                "            break;     ",
                "          }",
                "        }",
                "        cognito.deleteUserPoolClient({",
                "          UserPoolClientId: userPoolClient.Id",
                "        }, function (err, data) {",
                "          if (err) {",
                "            console.log(err, err.stack);",
                "            response.send(event, context, responseStatus);",
                "          }",
                "          response.send(event, context, \"SUCCESS\");",
                "        });",
                "      }",
                "    });",
                "  } else if (event.RequestType == \"Update\") {",
                "    responseStatus = \"SUCCESS\";",
                "    response.send(event, context, responseStatus);",
                "  } else {",
                "    var responseData = {};",
                "    cognito.createUserPoolClient({",				
                "      ClientName: event.ResourceProperties.ClientName,",				
                "      UserPoolId: event.ResourceProperties.UserPoolId,",				
				"      RefreshTokenValidity: event.ResourceProperties.RefreshTokenValidity",				
                
				"     }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "      }",
                "      else {",
                "        responseStatus = \"SUCCESS\";",
                "        console.log(data);",
				"        responseData = { ClientId: data.UserPoolClient.ClientId };",
                "      }",
                "      response.send(event, context, responseStatus, responseData);",
                "    });",			
                "  }",
                "};"
              ]
            ]
          }
        },
        "Description": "CognitoUserPoolFunction Function",
        
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 30
      }
    },      
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
			  
			}
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
  {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:CreateUserPool",
					"cognito-idp:ListUserPools",
					"cognito-idp:DeleteUserPool",
					"cognito-idp:UpdateUserPool",
					"cognito-idp:SetUserPoolRoles",
					"cognito-idp:ListUserPoolClients",
					"cognito-idp:CreateUserPoolClient",
					"cognito-idp:DeleteUserPoolClient",
					"cognito-idp:UpdateUserPoolClient",					
					"iam:PassRole"
                  ],
                  "Resource": "*"
                }
 
              ]
            }
          }
        ]
      }
    },
	"CognitoUserPoolSMSRole": {
 			"Type": "AWS::IAM::Role",
 			"Properties": {
 				"AssumeRolePolicyDocument": {
 					"Version": "2012-10-17",
 					"Statement": [
 						{
 							"Effect": "Allow",
 							"Principal": {
 								"Service": "cognito-idp.amazonaws.com"
 							},
 							"Action": "sts:AssumeRole"
 
 						}
		
				]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [                
				{
            "Effect": "Allow",
            "Action": [
                "sns:publish"
            ],
            "Resource": [
                "*"
            ]
        }           
          
        ]
      }
    }
	]
    }}
  },

  "Outputs": {}
}
