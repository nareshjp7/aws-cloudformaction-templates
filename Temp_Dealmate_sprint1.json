{
  "AWSTemplateFormatVersion": "2010-09-09",
"Description": "AWS CloudFormation Template Apis",
 "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups":[
	  {
          "Label": {
            "default": "DynamoDB Configuration"
          },
          "Parameters": [
            "ReadCapacityUnits",
			"WriteCapacityUnits"
          ]
        },
	 {
          "Label": {
            "default": "CognitoUserPool Configuration"
          },
          "Parameters": [
            "PoolName",
			"UnusedAccountValidityDays",
			"MfaConfiguration",
			"MinimumLengthForPasswordPolicy",
			"AutoVerifiedAttributes",
			"DeviceOnlyRememberedOnUserPrompt",
			"AllowAdminCreateUserOnly",
			"ChallengeRequiredOnNewDevice",
			"ExternalId"
          ]
        }	
		],		
	"ParameterLabels": {
		"ReadCapacityUnits" :{
		"default":"ReadCapacityUnits"
		},
		"WriteCapacityUnits":{
		"default":"WriteCapacityUnits"
		},
		"PoolName" :{
		"default":"PoolName"
		},
		"UnusedAccountValidityDays":{
		"default":"UnusedAccountValidityDays"
		},
		"MfaConfiguration" :{
		"default":"MfaConfiguration"
		},
		"MinimumLengthForPasswordPolicy":{
		"default":"MinimumLengthForPasswordPolicy"
		},
		"AutoVerifiedAttributes" :{
		"default":"AutoVerifiedAttributes"
		},
		"DeviceOnlyRememberedOnUserPrompt":{
		"default":"DeviceOnlyRememberedOnUserPrompt"
		},
		"AllowAdminCreateUserOnly" :{
		"default":"AllowAdminCreateUserOnly"
		},
		"ChallengeRequiredOnNewDevice":{
		"default":"ChallengeRequiredOnNewDevice"
		},
		"ExternalId":{
		"default":"ExternalId"
		}
	  }	
	}
	},
  "Parameters": {
    "ReadCapacityUnits": {
      "Description": "Please Enter Provisioned Read throughput",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
    },

    "WriteCapacityUnits": {
      "Description": "Please Enter Provisioned Write throughput",
      "Type": "Number",
      "Default": "10",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
  },
	"PoolName": {
			"Type": "String",			
			"Description": "Please Enter The Name of the Cognito UserPool"
		},
		"UnusedAccountValidityDays": {
			"Type": "Number",			
			"Description": "Please Enter The ExpiryPeriod for UnusedAccountValidity in Days"
		},
		"MfaConfiguration": {
			"Type": "String",
			"AllowedValues": [ "OFF", "OPTIONAL", "ON" ],
			"Description": "Please Select the State of the MFA( Multi Facture Authentication)."
		},
		"MinimumLengthForPasswordPolicy": {
			"Type": "String",			
			"Description": "Please Enter The MinimumLength for Password(Must be greater than 6)"
		},
		"AutoVerifiedAttributes": {
			"Type": "CommaDelimitedList",			
		  "Default": "phone_number,email",
			"Description": "Please Enter The Name of the AutoVerifiedAttributes"
		},
		"DeviceOnlyRememberedOnUserPrompt": {
			"Type": "String",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the DeviceOnlyRememberedOnUserPrompt"
		},
		"AllowAdminCreateUserOnly": {
			"Type": "String",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the AllowAdminCreateUserOnly"
		},
		"ChallengeRequiredOnNewDevice": {
			"Type": "String",
			"AllowedValues": [ "true",
          "false" ],
			"Description": "Please Enter The State of the ChallengeRequiredOnNewDevice"
		},
		"ExternalId": {
			"Type": "String",
			"Default": "b1cd02b2-09fa-4e85-b6cf-dc9a59e7fc31",
			"Description": "Please Enter The ExternalId of AWS Account"
		}
  },
  "Resources": {
"TableOfDealShares": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          { "AttributeName": "ShareId", "AttributeType": "S" }      
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
          { "AttributeName": "ShareId", "KeyType": "RANGE" }          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deal_Shares"
        
     }
	 },

"TableOfDealMateCIbuilds": {
"DependsOn": "TableOfDealShares",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "project", "AttributeType": "S" },
          { "AttributeName": "buildNum", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "project", "KeyType": "HASH" },
		  { "AttributeName": "buildNum", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "DealMate-CI-builds"
        
      }
	  },

"TableOfDealMateCIConfig": {
"DependsOn": "TableOfDealMateCIbuilds",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "project", "AttributeType": "S" }
              ],
        "KeySchema": [
          { "AttributeName": "project", "KeyType": "HASH" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "DealMate-CI-config"
        
      }
	  },

"TableOfDeals": {
"DependsOn": "TableOfDealMateCIConfig",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" }         
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals"
      }
	  },

"TableOfDealsComments": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          {"AttributeName": "CommentId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
		  { "AttributeName": "CommentId", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Comments"
        
      }
},

"TableOfDealsDislikes": {
"DependsOn": "TableOfDealsComments",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          {"AttributeName": "DislikeId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
		  { "AttributeName": "DislikeId", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Dislikes"
        
      }
},

"TableOfDealslikes": {
"DependsOn": "TableOfDealsDislikes",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          {"AttributeName": "LikeId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
		  { "AttributeName": "LikeId", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Likes"
        
   }
},

"TableOfDealsLoc": {
"DependsOn": "TableOfDealslikes",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "hashKey", "AttributeType": "S" },
          {"AttributeName": "rangeKey", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "hashKey", "KeyType": "HASH" },
          { "AttributeName": "rangeKey", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Loc"
        
   }
},
"TableOfDealsLocation": {
"DependsOn": "TableOfDealsLoc",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "hashKey", "AttributeType": "S" },
          {"AttributeName": "rangeKey", "AttributeType":"S"}
          
        ],
        "KeySchema": [
          { "AttributeName": "hashKey", "KeyType": "HASH" },
          { "AttributeName": "rangeKey", "KeyType": "RANGE" }
          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Location"
        
   }
},

"TableOfDealsPrivacy": {
"DependsOn": "TableOfDealsLocation",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" }          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Privacy"
        
   }
},

"TableOfDealsReminders": {
"DependsOn": "TableOfDealsLocation",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          { "AttributeName": "ReminderId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
			{ "AttributeName": "ReminderId", "KeyType": "RANGE" }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Reminders"
        
   }
},

"TableOfDealsTags": {
"DependsOn":"TableOfDealsReminders",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" }       
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" }          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Tags"
        
   }
},

"TableOfDealsUsed": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" } ,
          { "AttributeName": "UserId", "AttributeType": "S" }      
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
			{ "AttributeName": "UserId", "KeyType": "RANGE" }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Used"
        
   }
},

"TableOfDealsViews": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "DealId", "AttributeType": "S" },
          { "AttributeName": "ViewsId", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "DealId", "KeyType": "HASH" },
		  { "AttributeName": "ViewsId", "KeyType": "RANGE" }          
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
	"TableName" : "Deals_Views"
        
   }
},
 "TableOfUsers": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "UserId", "AttributeType": "S" },
          { "AttributeName": "temp", "AttributeType": "S" }
          
        ],
        "KeySchema": [
          { "AttributeName": "UserId", "KeyType": "HASH" },
          
		  { "AttributeName": "temp", "KeyType": "RANGE" }
		  
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
		"TableName" : "Users"
	}
},	

 "TableOfUsersFriends": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "UserId", "AttributeType": "S" }          
          
        ],
        "KeySchema": [
          { "AttributeName": "UserId", "KeyType": "HASH" }   
		 
		  
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
		"TableName" : "Users_Friends"
	}
},	
"TableOfUsersTags": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "UserId", "AttributeType": "S" }         
		  
        ],
        "KeySchema": [
          { "AttributeName": "UserId", "KeyType": "HASH" }   
		 
		  
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },        
		"TableName" : "Users_Tags"       
      }
    },
 "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:CreateIdentityPool",
                    "cognito-identity:DeleteIdentityPool",
                    "cognito-identity:UpdateIdentityPool",
                    "cognito-identity:SetIdentityPoolRoles"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3BucketPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "arn:aws:s3:::*/*"
                }
              ]
            }
          },
          {
            "PolicyName": "DynamoDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "arn:aws:dynamodb:*:*:table/*"
                }
              ]
            }
          }
        ]
      }
    },
	 "LambdaPostviews": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostViewsDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "Postviewsnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Postviews"
        }
      },
    "Stacklike": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "Postviewsnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "Postviewsnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUT": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "Postviewsnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "Postviewsnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaPostviews",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Prod": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "Postviewsnew"
        },
        "DeploymentId": {
          "Ref": "Deployment"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/Postviewsnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelNoFlattens": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "Postviewsnew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "Deployment": {
      "DependsOn": "PUT",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "Postviewsnew"
        }
      }
    },
    "Authorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaPostviews",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "Postviewsnew"
        }
      }
    },
    "LambdaPostComments": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostCommentsDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostCommentsnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostComments"
        }
    },
    "Stacking": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostCommentsnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostCommentsnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stacking"
      }
    },
    "PUTing": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostCommentsnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostCommentsnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaPostComments",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Proding": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Proding",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostCommentsnew"
        },
        "DeploymentId": {
          "Ref": "TestDeployment"
        },
        "Variables": {
          "Stack": "Proding"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostCommentsnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelNoFlattensing": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostCommentsnew"
        },
        "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "TestDeployment": {
      "DependsOn": "PUTing",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostCommentsnew"
        }
      }
    },
    "Authorizering": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaPostComments",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostCommentsnew"
        }
      }
    },
   
	  "LambdaPostDislikes": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostDislikesDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostDislikesnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostDislikes"
        }
    },
    "Stackdislie": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostDislikesnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostDislikesnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTdislike": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostDislikesnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostDislikesnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaPostDislikes",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Proddislike": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostDislikesnew"
        },
        "DeploymentId": {
          "Ref": "Deploymentdislike"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostDislikesnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "Pets": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostDislikesnew"
        },
        "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "Deploymentdislike": {
      "DependsOn": "PUTdislike",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostDislikesnew"
        }
      }
    },
    "Authorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaPostDislikes",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostDislikesnew"
        }
      }
    },
	 "Lambdapostdeal": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostDealDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "postdealnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "postdeal"
        }
      },
    "Stackdeals": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "postdealnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "postdealnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTdeals": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "postdealnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "postdealnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaPostDislikes",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Prodstage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "postdealnew"
        },
        "DeploymentId": {
          "Ref": "Deploymentdeals"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/postdealnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "postdealnew"
        },
        "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "Deploymentdeals": {
      "DependsOn": "PUTdeals",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "postdealnew"
        }
      }
    },
    "Authorizerdeals": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Lambdapostdeal",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "postdealnew"
        }
      }
    },
	 "LambdapostLikes": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostLikesDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostLikesnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostLikes"
        }
    },
    "StackLikes": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostLikesnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostLikesnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTLikes": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostLikesnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostLikesnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdapostLikes",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "ProdLikes": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostLikesnew"
        },
        "DeploymentId": {
          "Ref": "DeploymentLikes"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostLikesnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelLikes": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostLikesnew"
        },
        "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "DeploymentLikes": {
      "DependsOn": "PUTLikes",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostLikesnew"
        }
      }
    },
    "AuthorizerLikes": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdapostLikes",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostLikesnew"
        }
      }
    },
	   "Lambdapostshare": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostSharesDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostSharesnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostShares"
        }
      },
    "Stackshare": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostSharesnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostSharesnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTshare": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostSharesnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostSharesnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "Lambdapostshare",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Prodshare": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostSharesnew"
        },
        "DeploymentId": {
          "Ref": "Deploymentshare"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostSharesnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelshare": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostSharesnew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "Deploymentshare": {
      "DependsOn": "PUTshare",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostSharesnew"
        }
      }
    },
    "Authorizershare": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Lambdapostshare",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostSharesnew"
        }
      }
    },
	 "Lambdaposttags": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostTagsDaos",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "Posttagsnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Posttags"
        }
      },
    "Stacktags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "Posttagsnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "Posttagsnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTtags": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "Posttagsnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "Posttagsnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "Lambdaposttags",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "Prodtags": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "Posttagsnew"
        },
        "DeploymentId": {
          "Ref": "Deploymenttags"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/Posttagsnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelNoFlattens": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "Posttagsnew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "Deploymenttags": {
      "DependsOn": "PUTtags",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "Posttagsnew"
        }
      }
    },
    "Authorizertags": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Lambdaposttags",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "Posttagsnew"
        }
      }
    },
	 "LambdaFriends": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.friends.FriendsDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostFriendsnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostFriends"
        }
      },
    "StackFriends": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostFriendsnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostFriendsnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTFriends": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostFriendsnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostFriendsnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaFriends",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "ProdFriends": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostFriendsnew"
        },
        "DeploymentId": {
          "Ref": "DeploymentFriends"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostFriendsnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelFriends": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostFriendsnew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "DeploymentFriends": {
      "DependsOn": "PUTFriends",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostFriendsnew"
        }
      }
    },
    "AuthorizerFriends": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaFriends",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostFriendsnew"
        }
      }
    },
	   "LambdaGetDealsbyuserId": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.GetDealsDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "GetDealsbyuserIdnew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "GetDealsbyuserId"
        }
      },
    "StackGetDeal": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "GetDealsbyuserIdnew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTGetDeal": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "GetDealsbyuserIdnew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaGetDealsbyuserId",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "ProdGetDeal": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        },
        "DeploymentId": {
          "Ref": "DeploymentGetdeals"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/GetDealsbyuserIdnew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelGetDeal": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "DeploymentGetdeals": {
      "DependsOn": "PUTGetDeal",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        }
      }
    },
    "AuthorizerGetDeal": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaGetDealsbyuserId",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "GetDealsbyuserIdnew"
        }
      }
    },
	"LambdaPostUsedDao": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "dealmatesprintdemo",
          "S3Key": "PostDeal-1584c1e9-edaa-4c41-baf4-1d741aa0dab7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "com.dealmate.lambda.function.dao.deals.PostUsedDao",
        "Runtime": "java8",
        "MemorySize": 256
      }
    },
    "PostUsedDaonew": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PostUsedDao"
        }
      },
    "StackUsedDao": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "PostUsedDaonew",
            "RootResourceId"
          ]
        },
        "PathPart": "stack"
      }
    },
    "PUTUsedDao": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "PostUsedDaonew",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaPostUsedDao",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204
            }
          ]
        }
      }
    },
    "ProdUsedDao": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        },
        "DeploymentId": {
          "Ref": "DeploymentUsedDao"
        },
        "Variables": {
          "Stack": "Prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/PostUsedDaonew",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "ThrottlingBurstLimit": "999"
          }
        ]
      }
    },
    "PetsModelUsedDao": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        },
       "Name": "Mymodel",
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "DeploymentUsedDao": {
      "DependsOn": "PUTUsedDao",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        }
      }
    },
    "AuthorizerUsedDao": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "LambdaPostUsedDao",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN",
        "IdentitySource": "method.request.header.Auth",
        "Name": "DefaultAuthorizer",
        "RestApiId": {
          "Ref": "PostUsedDaonew"
        }
      }
    },
	    "CognitoUserPool": {
      "Type": "Custom::CognitoUserPool",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CognitoUserPoolFunction",
            "Arn"
          ]
        },        
        "PoolName": { "Ref" : "PoolName" },
        "AliasAttributes": [
          "phone_number",
          "email"		  
        ],		
		"AutoVerifiedAttributes": { "Ref" : "AutoVerifiedAttributes" },
		
		"Policies": { 
      "PasswordPolicy": { 
         "MinimumLength": { "Ref" : "MinimumLengthForPasswordPolicy" }
		 
         
      }
   },
	"PasswordPolicy": {
            "MinimumLength": {
              "Ref": "MinimumLengthForPasswordPolicy"
            }
			
        },   
		"AdminCreateUserConfig": {
			
			"InviteMessageTemplate": {
			"EmailMessage": "Your username is {username} and temporary password is {####}.",
			"EmailSubject": "Your temporary password",
			"SMSMessage": "Your username is {username} and temporary password is {####}."
      },
      "UnusedAccountValidityDays": { "Ref" : "UnusedAccountValidityDays" }
		},		
		"MfaConfiguration": { "Ref" : "MfaConfiguration" },
                
        "LambdaConfig": {
          "CustomMessage": "CustomMessage",
          "PostAuthentication": "PostAuthentication",
          "PostConfirmation": "PostConfirmation",
          "PreAuthentication": "PreAuthentication",
          "PreSignUp": "PreSignUp"
        },
		"DeviceConfiguration": { 
      "ChallengeRequiredOnNewDevice": { "Ref" : "ChallengeRequiredOnNewDevice" },
      "DeviceOnlyRememberedOnUserPrompt": { "Ref" : "DeviceOnlyRememberedOnUserPrompt" }
   },
			
   "Schema": [ 
      { 
         "AttributeDataType": "Number",		 
         "Name"  : "postalcode",		 	 
         "NumberAttributeConstraints": { 
            "MaxValue": "1000000",
            "MinValue": "0"
         }         
	  },
	   { 
         "AttributeDataType": "String",		 
         "Name"  : "family_name",		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         "Name"  : "given_name",		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         "Name"  : "email",		 
         "StringAttributeConstraints": { 
            "MaxLength": "2048",
            "MinLength": "0"
         }         
	  },
	  { 
         "AttributeDataType": "String",		 
         "Name"  : "phone_number",		  
         "StringAttributeConstraints": {
                    "MinLength": "0",
                    "MaxLength": "2048"
                }         
	  }
	  
		
   ],   
 

   "EmailConfiguration": { 
      "ReplyToEmailAddress": "alukka@mavenstaffing.in",
      "SourceArn": "arn:aws:iam::631580520244:role/service-role/PoolName-SMS-Role"
   },
   "SmsAuthenticationMessage": "SmsAuthenticationMessage",
   "SmsConfiguration": { 
      "ExternalId": { "Ref" : "ExternalId"},
      "SnsCallerArn":  {
          "Fn::GetAtt": [
            "CognitoUserPoolSMSRole",
            "Arn"
          ]
        }
   },   
   "SmsVerificationMessage": "Your Deal Mate verification code is {####}."  

}
},
"CognitoUserPoolClient": {
  "Type": "Custom::CreateUserPoolClient",
  "DependsOn" : "CognitoUserPool",
  "Properties": {
	"ServiceToken": {
          "Fn::GetAtt": [
            "CognitoUserPoolClientFunction",
            "Arn"
          ]
        },
	"ClientName": "DealMate",
	"GenerateSecret": true,
	"UserPoolId": { "Fn::GetAtt" : [ "CognitoUserPool", "Id" ] },
	"RefreshTokenValidity": 30
	}
	},     
   
    "CognitoUserPoolFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require(\"cfn-response\");",
                "var AWS = require(\"aws-sdk\");",
                "var cognito = new AWS.CognitoIdentityServiceProvider();",
                "exports.handler = function (event, context) {",
                "  var responseStatus = \"FAILED\";",
                "  if (event.RequestType == \"Delete\") {",
                "    cognito.listUserPools({ MaxResults: 60 }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "        response.send(event, context, responseStatus);",
                "      }",
                "      else {",
                "        console.log(data);",
                "        var userPool = {};",
                "        for(var i = 0; i < data.UserPools.length; i++) {",
                "          if(data.UserPools[i].Name == event.ResourceProperties.PoolName) {",
                "            userPool = data.UserPools[i];",
                "            break;     ",
                "          }",
                "        }",
                "        cognito.deleteUserPool({",
                "          UserPoolId: userPool.Id",
                "        }, function (err, data) {",
                "          if (err) {",
                "            console.log(err, err.stack);",
                "            response.send(event, context, responseStatus);",
                "          }",
                "          response.send(event, context, \"SUCCESS\");",
                "        });",
                "      }",
                "    });",
                "  } else if (event.RequestType == \"Update\") {",
                "    responseStatus = \"SUCCESS\";",
                "    response.send(event, context, responseStatus);",
                "  } else {",
                "    var responseData = {};",
				"    var myObj = event.ResourceProperties.PasswordPolicy;",
				"    console.log(\"printing myObj 1\" , myObj);",
				"    myObj[\"RequireLowercase\"] = true;",
				"    myObj[\"RequireNumbers\"] = true;",
				"    myObj[\"RequireSymbols\"] = false;",
				"    myObj[\"RequireUppercase\"] = true;",
				"    var myMainObj = {};",
				"    myMainObj[\"PasswordPolicy\"] = myObj;",
				"    console.log(\"printing myMainObj 1\" , myMainObj);",
				"    var myObjj = event.ResourceProperties.Schema;",
				"    console.log(\"printing myMainObjj 1\" , myObjj);",
				"    myObjj[0][\"DeveloperOnlyAttribute\"] = true;",
				"    myObjj[0][\"Mutable\"] = true;",
				"    myObjj[0][\"Required\"] = false;",
				"    myObjj[1][\"DeveloperOnlyAttribute\"] = false;",
				"    myObjj[1][\"Mutable\"] = true;",
				"    myObjj[1][\"Required\"] = true;",
				"    myObjj[2][\"DeveloperOnlyAttribute\"] = false;",
				"    myObjj[2][\"Mutable\"] = true;",
				"    myObjj[2][\"Required\"] = true;",				
				"    console.log(\"printing myMainObjj 1\" , myObjj);",
                "    cognito.createUserPool({",
                "      PoolName: event.ResourceProperties.PoolName,",
                "      AliasAttributes: event.ResourceProperties.AliasAttributes,",
                "      MfaConfiguration: event.ResourceProperties.MfaConfiguration,",
                "      AutoVerifiedAttributes: event.ResourceProperties.AutoVerifiedAttributes,",
                "      SmsVerificationMessage: event.ResourceProperties.SmsVerificationMessage,",
                "      SmsConfiguration: event.ResourceProperties.SmsConfiguration,",
                "      Schema: event.ResourceProperties.Schema,",
                "      AdminCreateUserConfig: event.ResourceProperties.AdminCreateUserConfig,",
				"      Policies: myMainObj",
                "     }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "      }",
                "      else {",
                "        responseStatus = \"SUCCESS\";",
                "        console.log(data);",
                "        responseData = { Id: data.UserPool.Id };",
                "      }",
                "      response.send(event, context, responseStatus, responseData);",
                "    });",
                "  }",
                "};"
              ]
            ]
          }
        },
        "Description": "CognitoUserPoolFunction Function",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRoleforcognito",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 30
      }
    },
  "CognitoUserPoolClientFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require(\"cfn-response\");",				
                "var AWS = require(\"aws-sdk\");",				
                "var cognito = new AWS.CognitoIdentityServiceProvider();",
                "exports.handler = function (event, context) {",                    
                "  var responseStatus = \"FAILED\";",                
                "  if (event.RequestType == \"Delete\") {",
                "    cognito.listUserPoolClients({ MaxResults: 60 }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "        response.send(event, context, responseStatus);",
                "      }",
                "      else {",
                "        console.log(data);",
                "        var userPoolClient = {};",
                "        for(var i = 0; i < data.UserPoolClients.length; i++) {",
                "          if(data.UserPoolClients[i].Name == event.ResourceProperties.ClientName) {",
                "            userPoolClient = data.UserPoolClients[i];",
                "            break;     ",
                "          }",
                "        }",
                "        cognito.deleteUserPoolClient({",
                "          UserPoolClientId: userPoolClient.Id",
                "        }, function (err, data) {",
                "          if (err) {",
                "            console.log(err, err.stack);",
                "            response.send(event, context, responseStatus);",
                "          }",
                "          response.send(event, context, \"SUCCESS\");",
                "        });",
                "      }",
                "    });",
                "  } else if (event.RequestType == \"Update\") {",
                "    responseStatus = \"SUCCESS\";",
                "    response.send(event, context, responseStatus);",
                "  } else {",
                "    var responseData = {};",
                "    cognito.createUserPoolClient({",				
                "      ClientName: event.ResourceProperties.ClientName,",				
                "      UserPoolId: event.ResourceProperties.UserPoolId,",				
				"      RefreshTokenValidity: event.ResourceProperties.RefreshTokenValidity",				
                
				"     }, function (err, data) {",
                "      if (err) {",
                "        console.log(err, err.stack);",
                "      }",
                "      else {",
                "        responseStatus = \"SUCCESS\";",
                "        console.log(data);",
				"        responseData = { Id: data.UserPoolClient.Id };",
                "      }",
                "      response.send(event, context, responseStatus, responseData);",
                "    });",			
                "  }",
                "};"
              ]
            ]
          }
        },
        "Description": "CognitoUserPoolFunction Function",
        
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRoleforcognito",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 30
      }
    },      
    "LambdaExecutionRoleforcognito": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
			  
			}
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
				{
            "Effect": "Allow",
            "Action": [
                "sns:publish"
            ],
            "Resource": [
                "*"
            ]
        },
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
	"CognitoUserPoolSMSRole": {
 			"Type": "AWS::IAM::Role",
 			"Properties": {
 				"AssumeRolePolicyDocument": {
 					"Version": "2012-10-17",
 					"Statement": [
 						{
 							"Effect": "Allow",
 							"Principal": {
 								"Service": "cognito-idp.amazonaws.com"
 							},
 							"Action": "sts:AssumeRole",
 							"Condition": {
								"StringEquals": {
								"sts:ExternalId": { 
							"Ref" : "ExternalId"
							}
						}
            }
 						}
		
				]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [                
				{
            "Effect": "Allow",
            "Action": [
                "sns:publish"
            ],
            "Resource": [
                "*"
            ]
        }           
          
        ]
      }
    }
	]
    }}

  
  },
	   
	 "Outputs" : {
     "TableName1" : {
       "Value" : {"Ref" : "TableOfDealShares"},
       "Description" : "Name of the newly created DynamoDB table1"
     },
	 "TableName2" : {
       "Value" : {"Ref" : "TableOfDealMateCIbuilds"},
       "Description" : "Name of the newly created DynamoDB table2"
     },
	 "TableName3" : {
       "Value" : {"Ref" : "TableOfDealMateCIConfig"},
       "Description" : "Name of the newly created DynamoDB table3"
     },
	 "TableName4" : {
       "Value" : {"Ref" : "TableOfDeals"},
       "Description" : "Name of the newly created DynamoDB table4"
     },
	 "TableName5" : {
       "Value" : {"Ref" : "TableOfDealsComments"},
       "Description" : "Name of the newly created DynamoDB table5"
	
     },
	 "TableName6" : {
       "Value" : {"Ref" : "TableOfDealsDislikes"},
       "Description" : "Name of the newly created DynamoDB table6"
     },
	
	"TableName7" : {
       "Value" : {"Ref" : "TableOfDealslikes"},
       "Description" : "Name of the newly created DynamoDB table7"
     },
	
	"TableName8" : {
       "Value" : {"Ref" : "TableOfDealsLoc"},
       "Description" : "Name of the newly created DynamoDB table8"
     },
	
	"TableName9" : {
       "Value" : {"Ref" : "TableOfDealsLocation"},
       "Description" : "Name of the newly created DynamoDB table9"
     },
	
	
	"TableName10" : {
       "Value" : {"Ref" : "TableOfDealsPrivacy"},
       "Description" : "Name of the newly created DynamoDB table10"
     },

        
	"TableName11" : {
       "Value" : {"Ref" : "TableOfDealsReminders"},
       "Description" : "Name of the newly created DynamoDB table11"
     },

	
	"TableName12" : {
       "Value" : {"Ref" : "TableOfDealsTags"},
       "Description" : "Name of the newly created DynamoDB table12"
     },
     
	"TableName13" : {
       "Value" : {"Ref" : "TableOfDealsUsed"},
       "Description" : "Name of the newly created DynamoDB table13"
      },

	"TableName14" : {
       "Value" : {"Ref" : "TableOfDealsViews"},
       "Description" : "Name of the newly created DynamoDB table14"
      },
	
	"TableName15" : {
       "Value" : {"Ref" : "TableOfUsers"},
       "Description" : "Name of the newly created DynamoDB table16"
      },
	
	"TableName16" : {
       "Value" : {"Ref" : "TableOfUsersFriends"},
       "Description" : "Name of the newly created DynamoDB table17"
      },

	"TableName17" : {
       "Value" : {"Ref" : "TableOfUsersTags"},
       "Description" : "Name of the newly created DynamoDB table18"
	}
   }
   }
  
  